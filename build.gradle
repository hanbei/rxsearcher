buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}

plugins {
    id "io.spring.dependency-management" version "0.6.0.RELEASE"
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'org.jetbrains.kotlin.jvm' version '1.1.1'
}

allprojects {
    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'jacoco'
    apply plugin: 'application'
    apply plugin: 'org.junit.platform.gradle.plugin'

    version = '0.2.0'
    sourceCompatibility = 1.8
    mainClassName = "rxsearch.server.VertxServer"

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.slf4j:slf4j-api"
        compile "org.jetbrains.kotlin:kotlin-stdlib"

        testCompile "junit:junit"
        testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'
        testCompile "org.junit.jupiter:junit-jupiter-api"
        testRuntime "org.junit.jupiter:junit-jupiter-engine"

        testCompile 'org.mockito:mockito-core'
        testCompile 'org.hamcrest:hamcrest-all'
        testCompile 'io.kotlintest:kotlintest'
        testRuntime "org.junit.vintage:junit-vintage-engine"
    }

    dependencyManagement {
        dependencies {
            dependency "com.fasterxml.jackson.core:jackson-databind:2.9.0"
            dependency "com.fasterxml.jackson.datatype:jackson-datatype-guava:2.9.0"
            dependency "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0"
            dependency "org.jooq:joox:1.4.0"

            dependency "com.google.guava:guava:21.0"
            dependency "commons-codec:commons-codec:1.9"

            dependencySet(group: "org.slf4j", version: "1.7.25") {
                entry "slf4j-api"
                entry "jul-to-slf4j"
                entry 'slf4j-nop'
            }
            dependency "ch.qos.logback:logback-classic:1.2.2"

            dependency 'io.reactivex.rxjava2:rxjava:2.1.6'
            dependency 'com.squareup.okhttp3:okhttp:3.9.0'
            dependency 'io.dropwizard.metrics:metrics-core:3.2.2'

            dependencySet(group: 'io.vertx', version: '3.5.0') {
                entry 'vertx-core'
                entry 'vertx-web'
                entry 'vertx-unit'
                entry 'vertx-dropwizard-metrics'
                entry 'vertx-codegen'
            }

            dependency 'org.codehaus.groovy:groovy-all:2.4.7'
            dependency "org.jetbrains.kotlin:kotlin-stdlib:1.1.4"

            // Test dependencies
            dependency("org.junit.jupiter:junit-jupiter-api:5.0.2")
            dependency("org.junit.jupiter:junit-jupiter-engine:5.0.2")
            dependency("org.junit.vintage:junit-vintage-engine:4.12.2")

            dependency("junit:junit:4.12") {
                exclude 'org.hamcrest:hamcrest-core'
            }
            dependency("org.mockito:mockito-core:2.7.21") {
                exclude 'org.hamcrest:hamcrest-core'
            }
            dependency "org.hamcrest:hamcrest-all:1.3"
            dependency "guru.nidi.raml:raml-tester:0.8.10"
            dependency "org.glassfish.jersey.core:jersey-client:2.23.2"
            dependency "org.spockframework:spock-core:1.0-groovy-2.4"
            dependency "cglib:cglib-nodep:3.2.4"

            // Kotlin test dependencies
            dependency "io.kotlintest:kotlintest:2.0.0"
        }
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

task copyJars(type: Copy, dependsOn: subprojects.jar) {
    from(subprojects.jar)
    into project.file("$buildDir/libs")
}

task copyDeps(type: Copy) {
    from(subprojects.configurations.runtime)
    into project.file("$buildDir/libs")
}

task copyFiles(dependsOn: [copyJars, copyDeps])

task stage(dependsOn: ['clean', 'copyFiles'])
copyFiles.mustRunAfter clean
